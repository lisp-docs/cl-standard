!0Programming Language---Common Lisp !!i
!17. Objects !!i
!27.1\ Object Creation and Initialization !!7--1
!37.1.1\ Initialization Arguments !!7--2
!37.1.2\ Declaring the Validity of Initialization Arguments !!7--2
!37.1.3\ Defaulting of Initialization Arguments !!7--3
!37.1.4\ Rules for Initialization Arguments !!7--4
!37.1.5\ Shared-Initialize !!7--5
!37.1.6\ Initialize-Instance !!7--6
!37.1.7\ Definitions of Make-Instance and Initialize-Instance !!7--7
!27.2\ Changing the Class of an Instance !!7--9
!37.2.1\ Modifying the Structure of the Instance !!7--9
!37.2.2\ Initializing Newly Added Local Slots !!7--9
!37.2.3\ Customizing the Change of Class of an Instance !!7--10
!27.3\ Reinitializing an Instance !!7--11
!37.3.1\ Customizing Reinitialization !!7--11
!27.4\ Meta-Objects !!7--12
!37.4.1\ Standard Meta-objects !!7--12
!27.5\ Slots !!7--13
!37.5.1\ Introduction to Slots !!7--13
!37.5.2\ Accessing Slots !!7--13
!37.5.3\ Inheritance of Slots and Slot Options !!7--14
!27.6\ Generic Functions and Methods !!7--16
!37.6.1\ Introduction to Generic Functions !!7--16
!37.6.2\ Introduction to Methods !!7--17
!37.6.3\ Agreement on Parameter Specializers and Qualifiers !!7--19
!37.6.4\ Congruent Lambda-lists for all Methods of a Generic Function !!7--19
!37.6.5\ Keyword Arguments in Generic Functions and Methods !!7--20
!47.6.5.1\ Examples of Keyword Arguments in Generic Functions and Methods !!7--20
!37.6.6\ Method Selection and Combination !!7--21
!47.6.6.1\ Determining the Effective Method !!7--21
!57.6.6.1.1\ Selecting the Applicable Methods !!7--21
!57.6.6.1.2\ Sorting the Applicable Methods by Precedence Order !!7--22
!57.6.6.1.3\ Applying method combination to the sorted list of applicable methods !!7--22
!47.6.6.2\ Standard Method Combination !!7--23
!47.6.6.3\ Declarative Method Combination !!7--24
!47.6.6.4\ Built-in Method Combination Types !!7--25
!37.6.7\ Inheritance of Methods !!7--26
!27.7\ {Objects} Dictionary !!7--27
